@model PayHeadMaster
@using System.Data
@using NonFactors.Mvc.Grid

@{
    ViewData["Title"] = "PayHeadMaster";
    Layout = "~/Views/Shared/_ContentNavbarLayout.cshtml";
}

<script>
    function showPopup(message) {
        var popup = document.getElementById("popupMessage");
        var popupText = document.getElementById("popupMessageText");
        var popupOKButton = document.getElementById("popupOKButton");

        popupText.textContent = message; // Set the message text
        popup.style.display = "block";

        // Close popup when OK button is clicked
        popupOKButton.addEventListener("click", function () {
            closePopup();
        });

        // Close popup when clicking outside of the message box
        document.addEventListener("click", function (event) {
            if (!popup.contains(event.target) && !popupOKButton.contains(event.target)) {
                closePopup();
            }
        });
    }

    function closePopup() {
        var popup = document.getElementById("popupMessage");
        popup.style.display = "none"; // Hide the popup
    }

    function handleMessages(message) {
        showPopup(message);
    }
</script>

<div id="popupMessage" class="dividerblack popborder" style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: #f0f0f0; color: #8c62c9; padding: 30px; border-radius: 10px; z-index: 1000; display: none; text-align: center;">
    <span id="popupMessageText" style="display: block; margin-bottom: 10px;"></span>
    <button id="popupOKButton" style="padding: 10px 20px; color: #8c62c9; border: none; border-radius: 5px; cursor: pointer;">OK</button>
</div>

<style>
    .popborder {
        border: 10px solid #8c62c9;
    }
</style>



<div class="row gy-4">
    <div class="col-md-12 col-lg-2">
    </div>
    <div class="col-md-12 col-lg-8">
        <div class="card">
            <div class="card-body " style="background-color:#8c62c9">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <div class="container">
                        <h2 class="centered text-white" style="font-family:'Lucida Bright'">Pay Head Master</h2>

                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row gy-4" style="height:8%">
</div>



<form asp-action="Addpayhead" asp-controller="HRManagement">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <div class="row gy-4">

        <div class="col-md-12 col-lg-2">
        </div>
        <div class="col-md-12 col-lg-8">
            <div class="card">

                <div class="card-body " style="background-image: linear-gradient(to right, #FFFFFF 0%, #FFFFFF 51%, #ece5f6 100%);">

                    <div class="form-floating form-floating-outline mb-4">

                        <input asp-for="PayheadID" class="form-control" placeholder="PayheadID" id="PayheadID" />
                        <label asp-for="PayheadID" class="control-label">PayheadID</label>
                        <span id="payheadidError" class="text-danger"></span>
                       
                    </div>

                    <div class="form-floating form-floating-outline mb-4">

                        <input asp-for="PayheadName" class="form-control" placeholder="PayheadName" id="PayheadName" value="@Model.PayheadName" />
                        <label asp-for="PayheadName" class="control-label">PayheadName</label>
                        <span id="payheadNameError" class="text-danger"></span>
                    </div>



                    <div class="form-group">
                        <label class="control-label">Payhead Type</label><br />
                        <div class="form-check form-check-inline">
                            <input asp-for="PayheadType" class="form-check-input" type="radio" value="Earningsforemployee" id="Earningsforemployee"  />
                            <label class="form-check-label" for="Earningsforemployee">Earnings For Employee</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <input asp-for="PayheadType" class="form-check-input" type="radio" value="Deductionfromemployee" id="Deductionfromemployee" />
                            <label class="form-check-label" for="Deductionfromemployee">Deduction From Employee</label>
                        </div>
                      
                        <span id="gendererror" class="text-danger"></span>
                    </div>



                    <div class="form-group">
                        <label class="control-label">Pay Calculation Type</label><br />
                        <div class="form-check form-check-inline">
                            <input asp-for="PayheadCalculationType" class="form-check-input" type="radio" value="AsComputedValue" id="AsComputedValue" />
                            <label class="form-check-label" for="AsComputedValue">As Computed Value</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <input asp-for="PayheadCalculationType" class="form-check-input" type="radio" value="AsUserDefinedValue" id="AsUserDefinedValue" />
                            <label class="form-check-label" for="AsUserDefinedValue">As User Defined Value</label>
                        </div>
                       
                        <span id="gendererror" class="text-danger"></span>
                    </div>

                </div>
            </div>
        </div>
    </div>
    <br />

    <div class="form-group">
        <center>
          
            <button type="submit" value="Save" class="btn btn-primary" onclick="validateForm(event)">Save</button>
            <button type="submit" value="Delete" name="buttonType" onclick="checkForm(event)" class="btn btn-primary">Delete</button>
            <button type="submit" value="Get" name="buttonType" onclick="checkForm(event)" class="btn btn-primary">Get</button>
            @if (ViewBag.Message != null)
            {
                <script>
                    handleMessages("@ViewBag.Message");
                </script>
            }
        </center>
    </div>



    @{
        var dataTable = ViewData["Payheaddata"] as DataTable;
    }


    <div class="row" style="margin-top:30px">
        <div class="col-md-12 col-lg-0"></div>
        <div class="col-md-12 col-lg-12">
            <div class="card">
                <div class="card-body dividerblack">
                    <h3 class="centered text-white" style="font-family: 'Lucida Bright'; margin-bottom: 20px; text-align: center;">Categories</h3>
                    <table class="table table-bordered" style="border: 1px solid #8c62c9;">
                        <thead style="background-color: #8c62c9; color: white;">
                            <tr>
                                <th>Payhead ID</th>
                                <th>Payhead Name</th>

                            </tr>
                        </thead>
                        <tbody>
                            @if (dataTable != null)
                            {
                                foreach (DataRow row in dataTable.Rows)
                                {
                                    <tr>
                                        <td>@row["PayheadID"]</td>
                                        <td>@row["PayheadName"]</td>

                                    </tr>
                                }
                            }
                        </tbody>
                    </table><div id="pagination-controls" style="text-align: center; margin-top: 10px;">
                        <button id="prev-btn" style="background-color: #9055fd; color: white; border: none; padding: 0px 6px; cursor: pointer; font-size: 16px; border-radius: 5px; margin: 0 5px;">Previous</button>
                        <div id="page-numbers" style="display: inline-block; vertical-align: middle;"></div>
                        <button id="next-btn" style="background-color: #9055fd; color: white; border: none; padding: 0px 6px; cursor: pointer; font-size: 16px; border-radius: 5px; margin: 0 5px;">Next</button>
                    </div>

                    <script>
                        document.addEventListener('DOMContentLoaded', function () {
                            const rowsPerPage = 5; // Number of rows per page
                            const table = document.querySelector('.table tbody'); // Select the table body
                            const rows = Array.from(table.querySelectorAll('tr')); // Get all rows
                            const totalRows = rows.length; // Total number of rows
                            const totalPages = Math.ceil(totalRows / rowsPerPage); // Calculate total pages

                            let currentPage = 1; // Current page number

                            // Function to display rows for a given page
                            function showPage(page) {
                                rows.forEach((row, index) => {
                                    row.style.display = (Math.floor(index / rowsPerPage) + 1 === page) ? '' : 'none'; // Show or hide row
                                });

                                updatePageNumbers(); // Update the page number buttons
                                document.getElementById('prev-btn').disabled = (page === 1); // Disable 'prev' button if on first page
                                document.getElementById('next-btn').disabled = (page === totalPages); // Disable 'next' button if on last page
                            }

                            // Function to create and update page number buttons
                            function updatePageNumbers() {
                                const pageNumbersContainer = document.getElementById('page-numbers');
                                pageNumbersContainer.innerHTML = ''; // Clear previous buttons

                                // Create page number buttons
                                for (let i = 1; i <= totalPages; i++) {
                                    const pageButton = document.createElement('button');
                                    pageButton.textContent = i;
                                    pageButton.style.backgroundColor = (i === currentPage) ? '#9055fd' : 'white'; // Highlight current page
                                    pageButton.style.color = (i === currentPage) ? 'white' : 'black';
                                    pageButton.style.border = 'none';
                                    pageButton.style.padding = '5px 10px';
                                    pageButton.style.cursor = 'pointer';
                                    pageButton.style.fontSize = '16px';
                                    pageButton.style.borderRadius = '5px';
                                    pageButton.style.margin = '0 3px';

                                    // Add click event listener to update current page
                                    pageButton.addEventListener('click', () => {
                                        currentPage = i;
                                        showPage(currentPage);
                                    });

                                    pageNumbersContainer.appendChild(pageButton); // Add button to container
                                }
                            }

                            // Event listener for 'prev' button
                            document.getElementById('prev-btn').addEventListener('click', () => {
                                if (currentPage > 1) {
                                    currentPage--;
                                    showPage(currentPage);
                                }
                            });

                            // Event listener for 'next' button
                            document.getElementById('next-btn').addEventListener('click', () => {
                                if (currentPage < totalPages) {
                                    currentPage++;
                                    showPage(currentPage);
                                }
                            });

                            showPage(currentPage); // Initial page display
                        });

                    </script>

                </div>
            </div>
        </div>
    </div>

</form>

<script>
    function validateForm(event) {
        var payheadName = document.getElementById("PayheadName").value;
        var payheadTypeEarnings = document.getElementById("Earningsforemployee");
        var payheadTypeDeduction = document.getElementById("Deductionfromemployee");
        var nameErrorSpan = document.getElementById("payheadNameError");
        var typeErrorSpan = document.getElementById("gendererror");

        // Clear previous error messages
        nameErrorSpan.textContent = '';
        typeErrorSpan.textContent = '';

        let hasError = false;

        // Validate Payhead Name
        if (!payheadName.trim()) {
            nameErrorSpan.textContent = "Pay head name cannot be empty";
            hasError = true;
        }

        // Validate Payhead Type Radio Buttons
        if (!payheadTypeEarnings.checked && !payheadTypeDeduction.checked) {
            typeErrorSpan.textContent = "Please select a Payhead Type (Earnings or Deduction)";
            hasError = true;
        }

        // Prevent form submission if there are errors
        if (hasError) {
            event.preventDefault();
        }
    }
</script>


<script>
    function checkForm(event) {
        var payid = document.getElementById("PayheadID").value;
        var errorSpan = document.getElementById("payheadidError");

        // Clear previous error message
        errorSpan.textContent = '';

        // Check if the field is empty
        if (!payid.trim()) {
            // Show error message
            errorSpan.textContent = "Pay ID cannot be empty";

            // Prevent form submission
            event.preventDefault();
        }
    }
</script>
