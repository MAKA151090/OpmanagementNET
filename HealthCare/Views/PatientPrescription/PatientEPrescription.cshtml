@model PrescriptionTableModel

@{
    ViewData["Title"] = "PatientEPrescription";
    Layout = "~/Views/Shared/_ContentNavbarLayout.cshtml";
}
@section VendorStyles {
    <link rel="stylesheet" href="~/vendor/libs/perfect-scrollbar/perfect-scrollbar.css" />
}
@section VendorScripts {
    <script src="~/vendor/libs/perfect-scrollbar/perfect-scrollbar.js"></script>
}
@section PageScripts {
    <script src="~/js/extended-ui-perfect-scrollbar.js"></script>
}

<script>
    function showPopup(message) {
        var popup = document.getElementById("popupMessage");
        var popupText = document.getElementById("popupMessageText");
        var popupOKButton = document.getElementById("popupOKButton");

        popupText.textContent = message; // Set the message text
        popup.style.display = "block";

        // Close popup when OK button is clicked
        popupOKButton.addEventListener("click", function () {
            closePopup();
        });

        // Close popup when clicking outside of the message box
        document.addEventListener("click", function (event) {
            if (!popup.contains(event.target) && !popupOKButton.contains(event.target)) {
                closePopup();
            }
        });
    }

    function closePopup() {
        var popup = document.getElementById("popupMessage");
        popup.style.display = "none"; // Hide the popup
    }

    function handleMessages(message) {
        showPopup(message);
    }
</script>

<div id="popupMessage" style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: #f0f0f0; color: black; padding: 30px; border: 10px solid white; border-radius: 10px; z-index: 1000; display: none; text-align: center;">
    <span id="popupMessageText" style="display: block; margin-bottom: 20px;"></span>
    <button id="popupOKButton" style="padding: 10px 20px; background-color: #007bff; color: white; border: none; border-radius: 5px; cursor: pointer;">OK</button>
</div>


<div class="row gy-4">
    <div class="col-md-12 col-lg-1">
    </div>
    <div class="col-md-12 col-lg-10">
        <div class="card">
            <div class="card-body " style="background-color:#8c62c9">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <div class="container">
                        <h2 class="centered text-white" style="font-family:'Lucida Bright'">PatientEPrescription</h2>

                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<div class="row gy-4" style="height:8%">
</div>





@using (Html.BeginForm("Prescription", "PatientPrescription", FormMethod.Post))
{

    <div asp-validation-summary="ModelOnly" class="text-danger"></div>

    <div class="row">

        <div class="col-md-12 col-lg-1">
            <div class="form-floating form-floating-outline mb-4">
            </div>
        </div>
        <div class="col-md-12 col-lg-10">
            <div class="card overflow-hidden mb-4" style="height: 150px;">
                <div class="card-body" id="vertical-example">

                    
                    <table class="table table-sm">
                        <thead>
                            <tr>
                                <th>Patient Name</th>
                                <th>Visit Date</th>
                                <th>Drug Name</th>
                                <th>Mrng Unit</th>
                                <th>Aft Unit</th>
                                <th>Eve Unit</th>
                                <th>Ngt Unit</th>
                                <th>When</th>
                                <th>Dosage</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @*   @if(Model!=null)
                        { *@
                            @foreach (var item in Model.Viewprescription)
                            {
                                <tr>
                                    <td>@item.PatientID</td>
                                    <td>@item.CaseVisitID.Split('_').Last()</td>
                                    <td>@item.DrugName</td>
                                    <td>@item.Morningunit</td>
                                    <td>@item.Afternoonunit</td>
                                    <td>@item.Eveningunit</td>
                                    <td>@item.Nightunit</td>
                                    <td>@item.RouteAdmin</td>
                                    <td>@item.Dosage</td>
                                   

                                    <td>

                                        <a href="@Url.Action("Edit", new { patientId = item.DbpatientID, orderId = item.OrderID, caseVisitId = item.CaseVisitID, drugId = item.DrugID,facility =item.FacilityID})" class="btn btn-primary btn-sm mdi mdi-pencil-box-outline me-2" style="width: 60px; margin-bottom: 10px;"></a>

                                        <a href="@Url.Action("Delete", new { patientId = item.DbpatientID, orderId = item.OrderID, caseVisitId = item.CaseVisitID, drugId = item.DrugID })" class="btn btn-primary btn-sm menu-icon tf-icons mdi mdi-delete" style="width: 60px;"></a>
                                    </td>
                                </tr>
                            }

                        </tbody>
                    </table>


                </div>
            </div>
        </div>
        <div class="col-md-12 col-lg-1">
            <div class="form-floating form-floating-outline mb-4">
            </div>
        </div>
    </div>

    <br />
    <div class="row gy-4">

        <div class="col-md-12 col-lg-2">
            <div class="form-floating form-floating-outline mb-4">
            </div>
        </div>



        <div class="col-md-12 col-lg-3">

            <div class="input-group">
                @{
                    var screenList = ((IEnumerable<PatientRegistrationModel>)ViewData["patientid"])
                    .Select(m => new SelectListItem
                {
                    Value = m.PatientID.ToString(), // Assuming ScreenId is of type int
                    Text = $"{m.FullName}"
                });
                }

                <input type="text" id="patientDropdownInput" class="form-control" placeholder="Patient Name" value="@ViewBag.SelectedPatientID" onkeyup="filterDropdown(event, 'patientDropdownInput', 'patientDropdown')" onclick="showDropdown('patientDropdown')" required>
                <ul id="patientDropdown" class="list-group mt-2"
                    style="display: none; position: absolute; top: 100%; left: 0; width: 100%; max-height: 200px; overflow-y: auto; background-color: white; border: 1px solid #ddd; border-radius: .25rem; box-shadow: 0 0 .5rem rgba(0, 0, 0, .1); z-index: 1000; padding: 0; margin: 0; list-style-type: none;">
                    @foreach (var item in screenList)
                    {
                        <li class="list-group-item" data-value="@item.Value" onclick="selectDropdownItem('patientDropdownInput', 'patientID', '@item.Text', '@item.Value')"
                            style="padding: .5rem 1rem; cursor: pointer; background-color: white; border: none; list-style-type: none;">
                            @item.Text
                        </li>
                    }
                </ul>

                <input type="hidden" name="PatientID" id="patientID" value="@ViewBag.SelectedPatientID" />
                <button class="btn btn-primary menu-icon tf-icons mdi mdi-account-multiple-plus" type="button" id="button-addon2" data-bs-toggle="modal" data-bs-target="#paymentModal"></button>
            </div>
        </div>
        <div class="col-md-12 col-lg-3">

            <div class="input-group">

                <select id="visitDropdown" class="form-control" name="visitDropdown" fdprocessedid="stubwn" required>

                    <option value="">Select Visit ID</option>
                    @* The options will be populated dynamically using JavaScript *@

                    @foreach (var item in Model.Items)
                    {
                        <option value="@item.CaseVisitID"
                                selected="@(item.CaseVisitID == Model.SelectedItemId)">
                            @item.CaseVisitID
                        </option>
                    }
                </select>


                <input type="hidden" name="CaseVisitID" id="CaseVisitID" value="@Model.SelectedItemId" />

                <button class="btn btn-primary menu-icon tf-icons mdi mdi-human-greeting" type="button" id="addVisitButton" class="btn btn-outline-secondary" onclick="addNewVisit()"></button>
            </div>
        </div>

        <div class="col-md-12 col-lg-2">
            <button type="submit" value="Get" name="buttonType" class="btn btn-primary">Get</button>

        </div>

    </div>

    <br />

    <div class="row gy-4">
        <div class="col-md-12 col-lg-1">
        </div>

        <div class="col-md-12 col-lg-4">
            <div class="card">

                <div class="card-body " style="background-image: linear-gradient(to right, #FFFFFF 0%, #FFFFFF 51%, #ece5f6 100%);">

                    <div class="input-group">
                        @{
                            var Screenlist = ((IEnumerable<DrugInventoryModel>)ViewData["drugid"])
                            .Select(m => new SelectListItem
                {
                    Value = m.DrugId.ToString(), // Assuming ScreenId is of type int
                    Text = $"{m.ModelName}-{m.Dosage}"
                });
                        }
                        <input type="text" id="drugDropdownInput" class="form-control" placeholder="Drug Name" value="@ViewBag.SelectedDrugID" onkeyup="filterDropdown(event, 'drugDropdownInput', 'drugDropdown')" onclick="showDropdown('drugDropdown')">
                        <ul id="drugDropdown" class="list-group mt-2"
                            style="display: none; position: absolute; top: 100%; left: 0; width: 100%; max-height: 200px; overflow-y: auto; background-color: white; border: 1px solid #ddd; border-radius: .25rem; box-shadow: 0 0 .5rem rgba(0, 0, 0, .1); z-index: 1000; padding: 0; margin: 0; list-style-type: none;">
                            @foreach (var item in Screenlist)
                            {
                                <li class="list-group-item" data-value="@item.Value" onclick="selectDropdownItem('drugDropdownInput', 'drugID', '@item.Text', '@item.Value')"
                                    style="padding: .5rem 1rem; cursor: pointer; background-color: white; border: none; list-style-type: none;">
                                    @item.Text
                                </li>
                            }
                        </ul>

                        <input type="hidden" name="DrugID" id="drugID" value="@ViewBag.SelectedDrugID" />
                        <button class="btn btn-primary menu-icon tf-icons mdi mdi-pill" type="button" id="button-addon2" data-bs-toggle="modal" data-bs-target="#drugModal"></button>

                    </div>


                    <div class="form-floating form-floating-outline mb-4" style="margin-top:10px">
                        <input asp-for="PrescriptionDate" class="form-control" type="date" placeholder="Prescription Date" />
                        <label asp-for="PrescriptionDate" class="control-label">Prescription Date</label>


                    </div>

                    <div class="form-group">
                        <fieldset>
                            <legend class="control-label">Frequency</legend>

                            <div style="display: flex; gap: 10px;">
                                <div>
                                    <label asp-for="Morningunit" class="control-label">Morning</label>
                                    <input asp-for="Morningunit" class="form-control" type="number" style="width: 50px;" maxlength="2" />
                                </div>

                                <div>
                                    <label asp-for="Afternoonunit" class="control-label">Afternoon</label>
                                    <input asp-for="Afternoonunit" class="form-control" type="number" style="width: 50px;" maxlength="2" />
                                </div>

                                <div>
                                    <label asp-for="Eveningunit" class="control-label">Evening</label>
                                    <input asp-for="Eveningunit" class="form-control" type="number" style="width: 50px;" maxlength="2" />
                                </div>

                                <div>
                                    <label asp-for="Nightunit" class="control-label">Night</label>
                                    <input asp-for="Nightunit" class="form-control" type="number" style="width: 50px;" maxlength="2" />
                                </div>
                            </div>
                        </fieldset>
                    </div>



                </div>
            </div>
        </div>


        <div class="col-md-12 col-lg-3">
            <div class="card">

                <div class="card-body " style="background-image: linear-gradient(to right, #FFFFFF 0%, #FFFFFF 51%, #ece5f6 100%);">
                    <div class="form-floating form-floating-outline mb-4">
                        <input asp-for="EndDate" class="form-control" type="number" placeholder="Number of Days" />
                        <label asp-for="EndDate" class="control-label">Number of Days</label>


                    </div>


                    <div class="form-floating form-floating-outline mb-4">
                        <label class="control-label"></label>

                        <div class="btn-group" role="group" aria-label="Food Timing">
                            <input type="radio" class="btn-check" name="RouteAdmin" id="beforeFood" autocomplete="off" value="Before Food">
                            <label class="btn btn-outline-primary" for="beforeFood">Before Food</label>

                            <input type="radio" class="btn-check" name="RouteAdmin" id="afterFood" autocomplete="off" value="After Food">
                            <label class="btn btn-outline-primary" for="afterFood">After Food</label>
                        </div>
                    </div>





                    <div class="form-floating form-floating-outline mb-4">
                        <textarea asp-for="Comments" class="form-control" placeholder="Diagnosis"></textarea>
                        <label asp-for="Comments" class="control-label">Diagnosis</label>


                    </div>


                  
                </div>
            </div>
        </div>
        <div class="col-md-12 col-lg-3">
            <div class="card">

                <div class="card-body " style="background-image: linear-gradient(to right, #FFFFFF 0%, #FFFFFF 51%, #ece5f6 100%);">

                    <div class="form-floating form-floating-outline mb-4">
                        <textarea asp-for="Instructions" class="form-control" placeholder="Procedure"></textarea>
                        <label asp-for="Instructions" class="control-label">Procedure</label>

                    </div>


                    <div class="form-floating form-floating-outline mb-4">
                        <textarea asp-for="Result" class="form-control" placeholder="Instructions"></textarea>
                        <label asp-for="Result" class="control-label">Instructions</label>


                    </div>


                    <div class="form-floating form-floating-outline mb-4">
                        <input asp-for="FillDate" class="form-control" type="date" placeholder="FollowUp Date">
                        <label asp-for="FillDate" class="control-label">FollowUp Date</label>


                    </div>

                
                </div>
            </div>
        </div>
        <div class="col-md-12 col-lg-1">
        </div>
    </div>
    <br />
    <div class="form-group">
        <center>
            <button type="submit" value="Save" name="buttonType" class="btn btn-primary">Save</button>
            @*  <button type="submit" value="Get" name="buttonType" class="btn btn-primary">Get</button>
        *@
            <button type="submit" value="Print" name="buttonType" class="btn btn-primary">Print</button>



        </center>
    </div>






    @if (ViewBag.Message != null)
    {
        <script>
            handleMessages("@ViewBag.Message");
        </script>
    }

    @if (ViewBag.Delete != null)
    {
        <script>
            handleMessages("@ViewBag.Delete");
        </script>
    }

    @if (ViewBag.ErrorMessage != null)
    {
        <script>
            handleMessages("@ViewBag.ErrorMessage");
        </script>
    }

    @if (ViewBag.DrugMessage != null)
    {
        <script>
            handleMessages("@ViewBag.DrugMessage");
        </script>
    }



}




<!-- Patient Details Modal -->
<div class="modal fade" id="paymentModal" tabindex="-1" role="dialog" aria-labelledby="paymentModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="paymentModalLabel">Enter Patient Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>

                </button>
            </div>
            <div class="modal-body">


                <form id="modalSearchFormcus" asp-controller="PatientPrescription" asp-action="AddPatientPop" method="post">

                    <div class="col mb-3">



                        <label for="FullName">Patient Name</label>
                        <input type="text" class="form-control" id="FullName" name="FullName" placeholder="Patient Name" />



                    </div>

                    <div class="col mb-3">
                        <label for="searchInput">Phone Number</label>
                        <input type="text" class="form-control" id="PhoneNumber" name="PhoneNumber" placeholder="Phone Number" />
                    </div>


                    <div class="col mb-3">
                        <label for="searchInput">Age</label>
                        <input type="text" class="form-control" id="Age" name="Age" placeholder="Age" />
                    </div>

                    <div class="col mb-3">
                        <label for="searchInput">Gender</label>
                        <input type="text" class="form-control" id="Gender" name="Gender" placeholder="Gender" />
                    </div>


                </form>

                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" id="saveCustomer">Save</button>
                </div>

            </div>
        </div>
    </div>
</div>


<!-- Drug Details Modal -->
<div class="modal fade" id="drugModal" tabindex="-1" role="dialog" aria-labelledby="drugModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="drugModalLabel">Enter Patient Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>

                </button>
            </div>
            <div class="modal-body">


                <form id="modalSearchFormcus1" asp-controller="PatientPrescription" asp-action="AdddrugPop" method="post">

                    <div class="col mb-3">



                        <label for="ModelName">Drug Name</label>
                        <input type="text" class="form-control" id="ModelName" name="ModelName" placeholder="Drug Name" />



                    </div>

                    <div class="col mb-3">
                        <label for="searchInput">Side Effects</label>
                        <input type="text" class="form-control" id="SideEffects" name="SideEffects" placeholder="Side Effects " />
                    </div>


                    <div class="col mb-3">
                        <label for="searchInput">Dosage</label>
                        <input type="text" class="form-control" id="Dosage" name="Dosage" placeholder="Dosage" />
                    </div>



                </form>

                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" id="saveCustomer1">Save</button>
                </div>

            </div>
        </div>
    </div>
</div>

<script>

    let suppressInputEvent = false; // Flag for suppressing input events

    // Function to filter dropdown items
    function filterDropdown(event, inputId, dropdownId) {
        if (suppressInputEvent) return; // Prevent filtering if input event is suppressed

        const input = document.getElementById(inputId);
        const dropdown = document.getElementById(dropdownId);
        const filter = input.value.toLowerCase();
        const items = dropdown.querySelectorAll('li');

        items.forEach(item => {
            const text = item.textContent.toLowerCase();
            item.style.display = text.includes(filter) ? '' : 'none';
        });

        dropdown.style.display = filter || input === document.activeElement ? 'block' : 'none'; // Show dropdown when filtering or when input is focused
    }

    // Function to select dropdown item
    function selectDropdownItem(inputId, hiddenId, text, value, dropdownId) {
        const input = document.getElementById(inputId);
        const hidden = document.getElementById(hiddenId);
        const dropdown = document.getElementById(dropdownId);

        const trimmedText = text.trim();
        input.value = trimmedText;
        hidden.value = value;

        // Fetch visit IDs for the selected patient (if it's the patient dropdown)
        if (dropdownId === 'patientDropdown') {
            fetchVisitIds(value);
        }

        dropdown.style.display = 'none'; // Hide dropdown after selection

        suppressInputEvent = true; // Suppress input event
        setTimeout(() => {
            suppressInputEvent = false; // Remove suppression
        }, 200);
    }

    document.addEventListener('DOMContentLoaded', () => {
        const patientInput = document.getElementById('patientDropdownInput');
        const patientDropdown = document.getElementById('patientDropdown');
        const drugInput = document.getElementById('drugDropdownInput'); // Add drug input
        const drugDropdown = document.getElementById('drugDropdown'); // Add drug dropdown

        let highlightedIndex = -1;

        function getVisibleItems(dropdown) {
            return Array.from(dropdown.querySelectorAll('li')).filter(item => item.style.display !== 'none');
        }

        // Patient dropdown input event
        patientInput.addEventListener('input', (event) => {
            filterDropdown(event, 'patientDropdownInput', 'patientDropdown');
            highlightedIndex = -1; // Reset highlight
        });

        // Drug dropdown input event
        drugInput.addEventListener('input', (event) => {
            filterDropdown(event, 'drugDropdownInput', 'drugDropdown');
            highlightedIndex = -1; // Reset highlight
        });

        // Common keydown event for both dropdowns
        function handleKeydown(event, dropdownId) {
            const dropdown = document.getElementById(dropdownId);
            const visibleItems = getVisibleItems(dropdown);

            // Keep the dropdown open when using arrow keys
            dropdown.style.display = 'block'; // Ensure dropdown remains open

            switch (event.key) {
                case 'ArrowDown':
                    if (highlightedIndex < visibleItems.length - 1) {
                        highlightedIndex++;
                        updateHighlight(visibleItems);
                        event.preventDefault(); // Prevent default behavior
                    }
                    break;
                case 'ArrowUp':
                    if (highlightedIndex > 0) {
                        highlightedIndex--;
                        updateHighlight(visibleItems);
                        event.preventDefault(); // Prevent default behavior
                    }
                    break;
                case 'Enter':
                    if (highlightedIndex >= 0) {
                        const item = visibleItems[highlightedIndex];
                        const inputId = dropdownId === 'patientDropdown' ? 'patientDropdownInput' : 'drugDropdownInput';
                        const hiddenId = dropdownId === 'patientDropdown' ? 'patientID' : 'drugID';
                        selectDropdownItem(inputId, hiddenId, item.textContent, item.getAttribute('data-value'), dropdownId);
                        highlightedIndex = -1; // Reset highlight
                        event.preventDefault();
                    }
                    break;
                case 'Escape':
                    dropdown.style.display = 'none'; // Close dropdown on escape
                    highlightedIndex = -1; // Reset highlight
                    break;
                default:
                    dropdown.style.display = 'block'; // Ensure dropdown remains open
                    break;
            }
        }

        // Add keydown event listeners for both dropdowns
        patientInput.addEventListener('keydown', (event) => handleKeydown(event, 'patientDropdown'));
        drugInput.addEventListener('keydown', (event) => handleKeydown(event, 'drugDropdown'));

        // Keep dropdown open when focused
        patientInput.addEventListener('focus', () => {
            patientDropdown.style.display = 'block';
        });
        drugInput.addEventListener('focus', () => {
            drugDropdown.style.display = 'block';
        });

        function updateHighlight(visibleItems) {
            visibleItems.forEach((item, index) => {
                item.style.backgroundColor = (index === highlightedIndex) ? '#7344ca' : 'white';
                item.style.color = (index === highlightedIndex) ? 'white' : 'black'; // Contrast text color
            });
            visibleItems[highlightedIndex]?.scrollIntoView({ block: 'nearest' });
        }

        // Add click event to dropdown items to close dropdown on selection
        function setupDropdownItemClickEvents(dropdown, inputId, hiddenId, dropdownId) {
            dropdown.querySelectorAll('li').forEach(item => {
                item.addEventListener('click', () => {
                    selectDropdownItem(inputId, hiddenId, item.textContent, item.getAttribute('data-value'), dropdownId);
                });
            });
        }

        setupDropdownItemClickEvents(patientDropdown, 'patientDropdownInput', 'patientID', 'patientDropdown');
        setupDropdownItemClickEvents(drugDropdown, 'drugDropdownInput', 'drugID', 'drugDropdown');

        // Click event to close dropdown when clicking outside
        document.addEventListener('click', (event) => {
            const target = event.target;
            if (!patientDropdown.contains(target) && target !== patientInput) {
                patientDropdown.style.display = 'none';
            }
            if (!drugDropdown.contains(target) && target !== drugInput) {
                drugDropdown.style.display = 'none';
            }
        });
    });

    // Function to fetch visit IDs
    function fetchVisitIds(patientId) {
        const selectedVisitId = document.getElementById('CaseVisitID').value; // Get the current selected visit ID

        fetch(`/PatientPrescription/GetCaseVisitIDs?patientId=${patientId}`)
            .then(response => response.json())
            .then(data => {
                const visitDropdown = document.getElementById('visitDropdown');
                visitDropdown.innerHTML = ''; // Clear previous options

                const placeholderOption = document.createElement('option');
                placeholderOption.value = '';
                placeholderOption.textContent = 'Select Visit ID'; // Placeholder text
                visitDropdown.appendChild(placeholderOption);

                if (data.length > 0) {
                    data.forEach(visitId => {
                        const option = document.createElement('option');
                        option.value = visitId;
                        option.textContent = visitId;
                        // Set the selected attribute if this visitId matches the selectedVisitId
                        if (visitId === selectedVisitId) {
                            option.selected = true;
                        }
                        visitDropdown.appendChild(option);
                    });
                } else {
                    visitDropdown.innerHTML = '<option value="">No visits found</option>'; // If no visits found
                }

                // Clear the hidden field initially
              //  document.getElementById('CaseVisitID').value = '';
            })
            .catch(error => console.error('Error fetching visit IDs:', error));
    }


    // Function to add a new visit
    function addNewVisit() {
        const patientId = document.getElementById('patientID').value;

        if (!patientId) {
            alert('Please select a patient first.');
            return;
        }

        fetch(`/PatientPrescription/AddNewVisitID?patientId=${patientId}`)
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    const visitDropdown = document.getElementById('visitDropdown');
                    const option = document.createElement('option');
                    option.value = data.newVisitId;
                    option.textContent = data.newVisitId;
                    visitDropdown.appendChild(option);
                    visitDropdown.value = data.newVisitId; // Set the newly added option as selected

                    document.getElementById('CaseVisitID').value = data.newVisitId;
                } else {
                    alert(data.message);
                }
            })
            .catch(error => console.error('Error adding new visit ID:', error));
    }

    document.getElementById('visitDropdown').addEventListener('change', function () {
        document.getElementById('CaseVisitID').value = this.value; // Update hidden input on selection
    });

    // Trigger the fetchVisitIds function when the page loads
    window.onload = function () {
        const selectedPatientId = document.getElementById('patientID').value;
        if (selectedPatientId) {
            fetchVisitIds(selectedPatientId); // Call the function with the selected patient ID
        }
    };

</script>


<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>

<script>
    $(document).ready(function () {
        // Event handler for the Save button
        $('#saveCustomer').click(function () {
            // Collect the form data
            var formData = {
                FullName: $('#FullName').val(),
                PhoneNumber: $('#PhoneNumber').val(),
                Age: $('#Age').val(),
                Gender: $('#Gender').val()
            };

            // AJAX request to submit form data to the controller action
            $.ajax({
                url: '/PatientPrescription/AddPatientPop', // URL to your action method
                type: 'POST',
                data: formData,
                success: function (response) {
                    // Handle the response from the server
                    alert("Patient details saved successfully!");

                    // Optionally, close the modal after saving
                    $('#paymentModal').modal('hide');

                    // Optionally, clear the form fields
                    $('#modalSearchFormcus')[0].reset();
                },
                error: function (xhr, status, error) {
                    // Handle any errors that occurred during the AJAX request
                    alert("Error: " + xhr.responseText);
                }
            });
        });
    });


</script>


<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script>
    $(document).ready(function () {
        // Event handler for the Save button
        $('#saveCustomer1').click(function () {
            // Collect the form data
            var formData = {
                ModelName: $('#ModelName').val(),
                SideEffects: $('#SideEffects').val(),
                Dosage: $('#Dosage').val()
            };

            // AJAX request to submit form data to the controller action
            $.ajax({
                url: '/PatientPrescription/AdddrugPop', // URL to your action method
                type: 'POST',
                data: formData,
                success: function (response) {
                    // Handle the response from the server
                    alert("Drug details saved successfully!");

                    // Optionally, close the modal after saving
                    $('#drugModal').modal('hide');

                    // Optionally, clear the form fields
                    $('#modalSearchFormcus1')[0].reset();
                },
                error: function (xhr, status, error) {
                    // Handle any errors that occurred during the AJAX request
                    alert("Error: " + xhr.responseText);
                }
            });
        });
    });


</script>

