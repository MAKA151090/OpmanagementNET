@model PrescriptionTableModel

@{
    ViewData["Title"] = "PatientEPrescription";
    Layout = "~/Views/Shared/_ContentNavbarLayout.cshtml";
}

<script>
    function showPopup(message) {
        var popup = document.getElementById("popupMessage");
        var popupText = document.getElementById("popupMessageText");
        var popupOKButton = document.getElementById("popupOKButton");

        popupText.textContent = message; // Set the message text
        popup.style.display = "block";

        popupOKButton.addEventListener("click", function () {
            popup.style.display = "none"; // Hide the popup when OK button is clicked
        });
    }

    function handleMessages(message) {
        showPopup(message);
    }
</script>

<div id="popupMessage" style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: #f0f0f0; color: black; padding: 30px; border: 10px solid white; border-radius: 10px; z-index: 1000; display: none; text-align: center;">
    <span id="popupMessageText" style="display: block; margin-bottom: 20px;"></span>
    <button id="popupOKButton" style="padding: 10px 20px; background-color: #007bff; color: white; border: none; border-radius: 5px; cursor: pointer;">OK</button>
</div>


<div class="row gy-4">
    <div class="col-md-12 col-lg-1">
    </div>
    <div class="col-md-12 col-lg-10">
        <div class="card">
            <div class="card-body " style="background-color:#8c62c9">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <div class="container">
                        <h2 class="centered text-white" style="font-family:'Lucida Bright'">PatientEPrescription</h2>

                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<div class="row gy-4" style="height:8%">
</div>





@using (Html.BeginForm("Prescription", "PatientPrescription", FormMethod.Post))
{

    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <div class="row gy-4">
        <div class="col-md-12 col-lg-1">
        </div>
        <div class="col-md-12 col-lg-3">
            <div class="card">

                <div class="card-body " style="background-image: linear-gradient(to right, #FFFFFF 0%, #FFFFFF 51%, #ece5f6 100%);">

                    <div class="input-group">
                        @{
                            var screenList = ((IEnumerable<PatientRegistrationModel>)ViewData["patientid"])
                            .Select(m => new SelectListItem
                {
                    Value = m.PatientID.ToString(), // Assuming ScreenId is of type int
                    Text = $"{m.FullName}"
                });
                        }

                        <input type="text" id="patientDropdownInput" class="form-control" placeholder="Patient Name" onkeyup="filterDropdown(event, 'patientDropdownInput', 'patientDropdown')" onclick="showDropdown('patientDropdown')">
                        <ul id="patientDropdown" class="list-group mt-2"
                            style="display: none; position: absolute; top: 100%; left: 0; width: 100%; max-height: 200px; overflow-y: auto; background-color: white; border: 1px solid #ddd; border-radius: .25rem; box-shadow: 0 0 .5rem rgba(0, 0, 0, .1); z-index: 1000; padding: 0; margin: 0; list-style-type: none;">
                            @foreach (var item in screenList)
                            {
                                <li class="list-group-item" data-value="@item.Value" onclick="selectDropdownItem('patientDropdownInput', 'patientID', '@item.Text', '@item.Value')"
                                    style="padding: .5rem 1rem; cursor: pointer; background-color: white; border: none; list-style-type: none;">
                                    @item.Text
                                </li>
                            }
                        </ul>

                        <input type="hidden" name="PatientID" id="patientID" value="PatientID" />
                        <button class="btn btn-primary menu-icon tf-icons mdi mdi-account-multiple-plus" type="button" id="button-addon2" data-bs-toggle="modal" data-bs-target="#paymentModal"></button>
                    </div>




                    <div class="form-floating form-floating-outline mb-4">
                        <select id="visitDropdown" class="form-control">
                            <option value="">Select Visit ID</option>
                            @* The options will be populated dynamically using JavaScript *@
                        </select>
                        <label asp-for="CaseVisitID"  class="control-label">Visit ID</label>

                        <input type="hidden" name="CaseVisitID" id="CaseVisitID" value="" />

                        <button type="button" id="addVisitButton" class="btn btn-outline-secondary" onclick="addNewVisit()">+</button>
                    </div>





                    <div class="form-floating form-floating-outline mb-4">
                        @{
                            var Screenlist = ((IEnumerable<DrugInventoryModel>)ViewData["drugid"])
                            .Select(m => new SelectListItem
                {
                    Value = m.DrugId.ToString(), // Assuming ScreenId is of type int
                    Text = $"{m.DrugId}-{m.ModelName}"
                });
                        }

                        @Html.DropDownListFor(model => model.DrugID, Screenlist, "Select Drug ID", new { @class = "form-control" })
                        <label asp-for="DrugID" class="control-label">Drug ID</label>

                    </div>


                    <div class="form-floating form-floating-outline mb-4">
                        <input asp-for="PrescriptionDate" class="form-control" type="date" placeholder="Prescription Date" />
                        <label asp-for="PrescriptionDate" class="control-label">Prescription Date</label>


                    </div>

                    <div class="form-group">
                        <fieldset>
                            <legend class="control-label">Frequency</legend>

                            <div style="display: flex; gap: 10px;">
                                <div>
                                    <label asp-for="Morningunit" class="control-label">Morning</label>
                                    <input asp-for="Morningunit" class="form-control" style="width: 50px;" maxlength="2" />
                                </div>

                                <div>
                                    <label asp-for="Afternoonunit" class="control-label">Afternoon</label>
                                    <input asp-for="Afternoonunit" class="form-control" style="width: 50px;" maxlength="2" />
                                </div>

                                <div>
                                    <label asp-for="Eveningunit" class="control-label">Evening</label>
                                    <input asp-for="Eveningunit" class="form-control" style="width: 50px;" maxlength="2" />
                                </div>

                                <div>
                                    <label asp-for="Nightunit" class="control-label">Night</label>
                                    <input asp-for="Nightunit" class="form-control" style="width: 50px;" maxlength="2" />
                                </div>
                            </div>
                        </fieldset>
                    </div>



                </div>
            </div>
        </div>



        <div class="col-md-12 col-lg-3">
            <div class="card">

                <div class="card-body " style="background-image: linear-gradient(to right, #FFFFFF 0%, #FFFFFF 51%, #ece5f6 100%);">
                    <div class="form-floating form-floating-outline mb-4">
                        <input asp-for="EndDate" class="form-control"  placeholder="End Date" />
                        <label asp-for="EndDate" class="control-label">End Date</label>


                    </div>
                    <div class="form-floating form-floating-outline mb-4">
                        <label class="control-label"></label>

                        <div class="btn-group" role="group" aria-label="Food Timing">
                            <input type="radio" class="btn-check" name="RouteAdmin" id="beforeFood" autocomplete="off" value="Before Food">
                            <label class="btn btn-outline-primary" for="beforeFood">Before Food</label>

                            <input type="radio" class="btn-check" name="RouteAdmin" id="afterFood" autocomplete="off" value="After Food">
                            <label class="btn btn-outline-primary" for="afterFood">After Food</label>
                        </div>
                    </div>





                    <div class="form-floating form-floating-outline mb-4">
                        <textarea asp-for="Comments" class="form-control" placeholder="Diagnosis"></textarea>
                        <label asp-for="Comments" class="control-label">Diagnosis</label>


                    </div>


                    <div class="form-floating form-floating-outline mb-4">
                        <textarea asp-for="Instructions" class="form-control" placeholder="Procedure"></textarea>
                        <label asp-for="Instructions" class="control-label">Procedure</label>
                       
                    </div>


                    <div class="form-floating form-floating-outline mb-4">
                        <textarea asp-for="Result" class="form-control" placeholder="Instructions"></textarea>
                        <label asp-for="Result" class="control-label">Instructions</label>


                    </div>


                    <div class="form-floating form-floating-outline mb-4">
                        <input asp-for="FillDate" class="form-control" type="date" placeholder="FollowUp Date">
                        <label asp-for="FillDate" class="control-label">FollowUp Date</label>


                    </div>
                    
                </div>
                </div>
            </div>
        <br />
        <div class="form-group">
            <center>
                <button type="submit" value="Save" name="buttonType" class="btn btn-primary">Save</button>
                <button type="submit" value="Get" name="buttonType" class="btn btn-primary">Get</button>
                <button type="submit" value="Print" name="buttonType" class="btn btn-primary">Print</button>



            </center>
        </div>

        </div>
   



    @if (Model != null)
    {



        <div class="row" style="margin-top:50px">
            <div class="col-md-12 col-lg-12">
                <div class="card">

                    <div class="card-body " style="background-image: linear-gradient(to right, #FFFFFF 0%, #FFFFFF 51%, #ece5f6 100%);">

                        <table class="table table-sm">
                            <thead>
                                <tr>
                                    <th>Patient ID</th>
                                    <th>Case Visit ID</th>
                                    <th>Order ID</th>
                                    <th>Drug ID</th>
                                    <th>Drug Name</th>
                                    <th>Morning Unit</th>
                                    <th>Afternoon Unit</th>
                                    <th>Evening Unit</th>
                                    <th>Night Unit</th>
                                    <th>When</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @*   @if(Model!=null)
                        { *@
                                @foreach (var item in Model.Viewprescription)
                                {
                                    <tr>
                                        <td>@item.PatientID</td>
                                        <td>@item.CaseVisitID</td>
                                        <td>@item.OrderID</td>
                                        <td>@item.DrugID</td>
                                        <td>@item.DrugName</td>
                                        <td>@item.Morningunit</td>
                                        <td>@item.Afternoonunit</td>
                                        <td>@item.Eveningunit</td>
                                        <td>@item.Nightunit</td>
                                        <td>@item.RouteAdmin</td>
                                        
                                        <td>
                                            <a href="@Url.Action("Edit", new { patientId = item.PatientID, orderId = item.OrderID, caseVisitId = item.CaseVisitID, drugId = item.DrugID,facility =item.FacilityID})" class="btn btn-primary">Edit</a>
                                            <a href="@Url.Action("Delete", new { patientId = item.PatientID, orderId = item.OrderID, caseVisitId = item.CaseVisitID, drugId = item.DrugID })" class="btn btn-primary">Delete</a>
                                        </td>
                                    </tr>
                                }

                            </tbody>
                        </table>



                    </div>

                </div>
            </div>
        </div>
    }

    @if (ViewBag.Message != null)
    {
        <script>
            handleMessages("@ViewBag.Message");
        </script>
    }

    @if (ViewBag.Delete != null)
    {
        <script>
            handleMessages("@ViewBag.Delete");
        </script>
    }

    @if (ViewBag.ErrorMessage != null)
    {
        <script>
            handleMessages("@ViewBag.ErrorMessage");
        </script>
    }

    @if (ViewBag.DrugMessage != null)
    {
        <script>
            handleMessages("@ViewBag.DrugMessage");
        </script>
    }




    @*  <div class="col-md-12 col-lg-4">
            <div class="card"> *@

    @*  <div class="card-body " style="background-image: linear-gradient(to right, #FFFFFF 0%, #FFFFFF 51%, #ece5f6 100%);">
                    <div class="form-floating form-floating-outline mb-4">
                        <input asp-for="Unit" class="form-control" placeholder="Unit" />
                        <label asp-for="Unit" class="control-label">Unit</label>


                    </div>
                    <div class="form-floating form-floating-outline mb-4">
                        <input asp-for="UnitCategory" class="form-control" placeholder="Unit Category" />
                        <label asp-for="UnitCategory" class="control-label">Unit Category</label>


                    </div>
                    <div class="form-floating form-floating-outline mb-4">
                        <input asp-for="Frequency" class="form-control" placeholder="Frequency" />
                        <label asp-for="Frequency" class="control-label"></label>


                    </div>
                    <div class="form-floating form-floating-outline mb-4">
                        <input asp-for="FrequencyUnit" class="form-control" placeholder="Frequency Unit" />
                        <label asp-for="FrequencyUnit" class="control-label">Frequency Unit</label>


                    </div>
                    <div class="form-floating form-floating-outline mb-4">
                        <input asp-for="Duration" class="form-control" placeholder="Duration" />
                        <label asp-for="Duration" class="control-label"></label>


                    </div>
                    <div class="form-floating form-floating-outline mb-4">
                        <input asp-for="Quantity" class="form-control" placeholder="Quantity" />
                        <label asp-for="Quantity" class="control-label"></label>


                    </div> *@


    @*  </div>



        </div> *@


    @*   <div class="form-floating form-floating-outline mb-4">
                <input asp-for="OrderID" class="form-control" placeholder="Order ID" required />
                <label asp-for="OrderID" class="control-label">Order ID</label>

                <span asp-validation-for="OrderID" class="text-danger"></span>
                </div> *@

    @*
                <div class="form-floating form-floating-outline mb-4">
                @{
                var screenlist = ((IEnumerable<StaffAdminModel>)ViewData["docid"])
                .Select(m => new SelectListItem
                {
                Value = m.StrStaffID.ToString(), // Assuming ScreenId is of type int
                Text = $"{m.StrStaffID} - {m.StrFullName}"
                });
                }

                @Html.DropDownListFor(model => model.DoctorID, screenlist, "Select Doctor ID", new { @class = "form-control" })
                <label asp-for="DoctorID" class="control-label">Doctor ID</label>

                </div>
                *@

}




<!-- Patient Details Modal -->
<div class="modal fade" id="paymentModal" tabindex="-1" role="dialog" aria-labelledby="paymentModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="paymentModalLabel">Enter Patient Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>

                </button>
            </div>
            <div class="modal-body">


                <form id="modalSearchFormcus" asp-controller="PatientPrescription" asp-action="AddPatientPop" method="post">

                    <div class="col mb-3">



                        <label for="FullName">Patient Name</label>
                        <input type="text" class="form-control" id="FullName" name="FullName" placeholder="Patient Name" />



                    </div>

                     <div class="col mb-3">
                        <label for="searchInput">Phone Number</label>
                        <input type="text" class="form-control" id="PhoneNumber" name="PhoneNumber" placeholder="Phone Number" />
                    </div>


                    <div class="col mb-3">
                        <label for="searchInput">Age</label>
                        <input type="text" class="form-control" id="Age" name="Age" placeholder="Age" />
                    </div> 

                     <div class="col mb-3">
                        <label for="searchInput">Gender</label>
                        <input type="text" class="form-control" id="Gender" name="Gender" placeholder="Gender" />
                    </div>

                  
                </form>

                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" id="saveCustomer">Save</button>
                </div>

            </div>
        </div>
    </div>
</div>


@* <script>
    let suppressInputEvent = false;

    function filterDropdown(event, inputId, dropdownId) {
        if (suppressInputEvent) return; // Prevent filtering if input event is suppressed

        const input = document.getElementById(inputId);
        const dropdown = document.getElementById(dropdownId);
        const filter = input.value.toLowerCase();
        const items = dropdown.querySelectorAll('li');

        items.forEach(item => {
            const text = item.textContent.toLowerCase();
            item.style.display = text.includes(filter) ? '' : 'none';
        });

        if (filter) {
            dropdown.style.display = 'block'; // Show dropdown when filtering
        }
    }

    function showDropdown(dropdownId) {
        const dropdown = document.getElementById(dropdownId);
        dropdown.style.display = 'block';
    }

    function selectDropdownItem(inputId, hiddenId, text, value) {
        const input = document.getElementById(inputId);
        const hidden = document.getElementById(hiddenId);
        const dropdown = document.getElementById('patientDropdown');

        // Trim whitespace from the selected text
        const trimmedText = text.trim();

        // Set the selected value in the input and hidden input
        input.value = trimmedText;
        hidden.value = value;

        // Hide the dropdown after selection
        dropdown.style.display = 'none';

        // Set the flag to suppress the input event momentarily
        suppressInputEvent = true;

        // Remove suppression after a short delay to allow normal input behavior again
        setTimeout(() => {
            suppressInputEvent = false;
        }, 200);
    }

    document.addEventListener('DOMContentLoaded', () => {
        const input = document.getElementById('patientDropdownInput');
        const dropdown = document.getElementById('patientDropdown');

        let highlightedIndex = -1;

        function getVisibleItems() {
            return Array.from(dropdown.querySelectorAll('li')).filter(item => item.style.display !== 'none');
        }

        input.addEventListener('input', (event) => {
            filterDropdown(event, 'patientDropdownInput', 'patientDropdown');
            highlightedIndex = -1; // Reset highlight when input changes
        });

        input.addEventListener('keydown', (event) => {
            const visibleItems = getVisibleItems();

            switch (event.key) {
                case 'ArrowDown':
                    if (highlightedIndex < visibleItems.length - 1) {
                        highlightedIndex++;
                        updateHighlight(visibleItems);
                        event.preventDefault(); // Prevent default behavior
                    }
                    break;
                case 'ArrowUp':
                    if (highlightedIndex > 0) {
                        highlightedIndex--;
                        updateHighlight(visibleItems);
                        event.preventDefault(); // Prevent default behavior
                    }
                    break;
                case 'Enter':
                    if (highlightedIndex >= 0) {
                        const item = visibleItems[highlightedIndex];
                        selectDropdownItem('patientDropdownInput', 'patientID', item.textContent, item.getAttribute('data-value'));
                        highlightedIndex = -1;
                        event.preventDefault(); // Prevent default behavior
                    }
                    break;
                case 'Escape':
                    dropdown.style.display = 'none'; // Close dropdown on escape
                    highlightedIndex = -1;
                    break;
            }
        });

        function updateHighlight(visibleItems) {
            visibleItems.forEach((item, index) => {
                item.style.backgroundColor = (index === highlightedIndex) ? '#7344ca' : 'white';
                item.style.color = (index === highlightedIndex) ? 'white' : 'black'; // Ensure text color contrasts with background
            });
            visibleItems[highlightedIndex]?.scrollIntoView({ block: 'nearest' });
        }

        // Click event to close dropdown when clicking outside
        document.addEventListener('click', (event) => {
            const target = event.target;
            if (!dropdown.contains(target) && target !== input) {
                dropdown.style.display = 'none';
            }
        });
    });


</script> *@


<script>
    let suppressInputEvent = false;

    function filterDropdown(event, inputId, dropdownId) {
        if (suppressInputEvent) return; // Prevent filtering if input event is suppressed

        const input = document.getElementById(inputId);
        const dropdown = document.getElementById(dropdownId);
        const filter = input.value.toLowerCase();
        const items = dropdown.querySelectorAll('li');

        items.forEach(item => {
            const text = item.textContent.toLowerCase();
            item.style.display = text.includes(filter) ? '' : 'none';
        });

        if (filter) {
            dropdown.style.display = 'block'; // Show dropdown when filtering
        }
    }

    function showDropdown(dropdownId) {
        const dropdown = document.getElementById(dropdownId);
        dropdown.style.display = 'block';
    }

    function selectDropdownItem(inputId, hiddenId, text, value) {
        const input = document.getElementById(inputId);
        const hidden = document.getElementById(hiddenId);
        const dropdown = document.getElementById('patientDropdown');

        // Trim whitespace from the selected text
        const trimmedText = text.trim();

        // Set the selected value in the input and hidden input
        input.value = trimmedText;
        hidden.value = value;

        // Hide the dropdown after selection
        dropdown.style.display = 'none';

        // Set the flag to suppress the input event momentarily
        suppressInputEvent = true;

        // Remove suppression after a short delay to allow normal input behavior again
        setTimeout(() => {
            suppressInputEvent = false;
        }, 200);

        // Fetch visit IDs for the selected patient
        fetchVisitIds(value);
    }

    document.addEventListener('DOMContentLoaded', () => {
        const input = document.getElementById('patientDropdownInput');
        const dropdown = document.getElementById('patientDropdown');

        let highlightedIndex = -1;

        function getVisibleItems() {
            return Array.from(dropdown.querySelectorAll('li')).filter(item => item.style.display !== 'none');
        }

        input.addEventListener('input', (event) => {
            filterDropdown(event, 'patientDropdownInput', 'patientDropdown');
            highlightedIndex = -1; // Reset highlight when input changes
        });

        input.addEventListener('keydown', (event) => {
            const visibleItems = getVisibleItems();

            switch (event.key) {
                case 'ArrowDown':
                    if (highlightedIndex < visibleItems.length - 1) {
                        highlightedIndex++;
                        updateHighlight(visibleItems);
                        event.preventDefault(); // Prevent default behavior
                    }
                    break;
                case 'ArrowUp':
                    if (highlightedIndex > 0) {
                        highlightedIndex--;
                        updateHighlight(visibleItems);
                        event.preventDefault(); // Prevent default behavior
                    }
                    break;
                case 'Enter':
                    if (highlightedIndex >= 0) {
                        const item = visibleItems[highlightedIndex];
                        selectDropdownItem('patientDropdownInput', 'patientID', item.textContent, item.getAttribute('data-value'));
                        highlightedIndex = -1;
                        event.preventDefault(); // Prevent default behavior
                    }
                    break;
                case 'Escape':
                    dropdown.style.display = 'none'; // Close dropdown on escape
                    highlightedIndex = -1;
                    break;
            }
        });

        function updateHighlight(visibleItems) {
            visibleItems.forEach((item, index) => {
                item.style.backgroundColor = (index === highlightedIndex) ? '#7344ca' : 'white';
                item.style.color = (index === highlightedIndex) ? 'white' : 'black'; // Ensure text color contrasts with background
            });
            visibleItems[highlightedIndex]?.scrollIntoView({ block: 'nearest' });
        }

        // Click event to close dropdown when clicking outside
        document.addEventListener('click', (event) => {
            const target = event.target;
            if (!dropdown.contains(target) && target !== input) {
                dropdown.style.display = 'none';
            }
        });
    });

    function fetchVisitIds(patientId) {
        // Make an AJAX request to get case visit IDs
        fetch(`/PatientPrescription/GetCaseVisitIDs?patientId=${patientId}`)
            .then(response => response.json())
            .then(data => {
                const visitDropdown = document.getElementById('visitDropdown');
                visitDropdown.innerHTML = ''; // Clear previous options
                if (data.length > 0) {
                    data.forEach(visitId => {
                        const option = document.createElement('option');
                        option.value = visitId;
                        option.textContent = visitId;
                        visitDropdown.appendChild(option);
                    });


                    visitDropdown.value = data[0]; // Set the first option as selected
                    document.getElementById('CaseVisitID').value = data[0]; // Set hidden field

                } else {
                    // If no visit found, clear the dropdown
                    visitDropdown.innerHTML = '<option value="">No visits found</option>';
                }
            })
            .catch(error => console.error('Error fetching visit IDs:', error));
    }

    function addNewVisit() {
        const patientId = document.getElementById('patientID').value;

        if (!patientId) {
            alert('Please select a patient first.');
            return;
        }

        // Make an AJAX request to get the last visit ID and create the next one
        fetch(`/PatientPrescription/AddNewVisitID?patientId=${patientId}`)
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    const visitDropdown = document.getElementById('visitDropdown');
                    const option = document.createElement('option');
                    option.value = data.newVisitId;
                    option.textContent = data.newVisitId;
                    visitDropdown.appendChild(option);
                    visitDropdown.value = data.newVisitId; // Set the newly added option as selected

                    document.getElementById('CaseVisitID').value = data.newVisitId;

                } else {
                    alert(data.message);
                }
            })
            .catch(error => console.error('Error adding new visit ID:', error));
    }

    document.getElementById('visitDropdown').addEventListener('change', function () {
        document.getElementById('CaseVisitID').value = this.value; // Update hidden input on selection
    });

   
</script>



<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>

<script>
    $(document).ready(function () {
        // Event handler for the Save button
        $('#saveCustomer').click(function () {
            // Collect the form data
            var formData = {
                FullName: $('#FullName').val(),
                PhoneNumber: $('#PhoneNumber').val(),
                Age: $('#Age').val(),
                Gender: $('#Gender').val()
            };

            // AJAX request to submit form data to the controller action
            $.ajax({
                url: '/PatientPrescription/AddPatientPop', // URL to your action method
                type: 'POST',
                data: formData,
                success: function (response) {
                    // Handle the response from the server
                    alert("Patient details saved successfully!");

                    // Optionally, close the modal after saving
                    $('#paymentModal').modal('hide');

                    // Optionally, clear the form fields
                    $('#modalSearchFormcus')[0].reset();
                },
                error: function (xhr, status, error) {
                    // Handle any errors that occurred during the AJAX request
                    alert("Error: " + xhr.responseText);
                }
            });
        });
    });


</script>
