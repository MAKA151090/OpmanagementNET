@model PatientTestModel

@{
    ViewData["Title"] = "TestCreation";
    Layout = "~/Views/Shared/_ContentNavbarLayout.cshtml";
}



@using (Html.BeginForm("TestCreation", "LabRad", FormMethod.Post))
{
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>

     <div class="row" style="margin-top:70px">
        <div class="col-md-12 col-lg-2 ">
        </div>
        <div class="col-md-12 col-lg-8">
            <div class="card">
                <div class="card-body " style="background-color:#8c62c9">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <div class="container">
                                <h2 class="centered text-white" style="font-family:'Lucida Bright'">TestCreation</h2>

                        </div>
                    </div>
                </div>
            </div>

            <div class="row" style="height:8%">
            </div>

            <div class="row">

                <div class="col-md-12 col-lg-12">
                    <div class="card">
                        <div class="card-body " style="background-image: linear-gradient(to right, #FFFFFF 0%, #FFFFFF 51%, #ece5f6 100%);">

                            <div class="input-group">
                            @{
                                var screenList = ((IEnumerable<TestMasterModel>)ViewData["testid"])
                                .Select(m => new SelectListItem
                {
                    Value = m.TestID.ToString(), // Assuming ScreenId is of type int
                    Text = $"{m.TestName}"
                });
                            }

                                <input type="text" id="testDropdownInput" class="form-control" placeholder="Test Name" value="@ViewBag.SelectedTestID" onkeyup="filterDropdown(event, 'testDropdownInput', 'testDropdown')" onclick="showDropdown('testDropdown')" required>
                                <ul id="testDropdown" class="list-group mt-2"
                                    style="display: none; position: absolute; top: 100%; left: 0; width: 100%; max-height: 200px; overflow-y: auto; background-color: white; border: 1px solid #ddd; border-radius: .25rem; box-shadow: 0 0 .5rem rgba(0, 0, 0, .1); z-index: 1000; padding: 0; margin: 0; list-style-type: none;">
                                    @foreach (var item in screenList)
                                    {
                                        <li class="list-group-item" data-value="@item.Value" onclick="selectDropdownItem('testDropdownInput', 'testID', '@item.Text', '@item.Value')"
                                            style="padding: .5rem 1rem; cursor: pointer; background-color: white; border: none; list-style-type: none;">
                                            @item.Text
                                        </li>
                                    }
                                </ul>

                                <input type="hidden" name="TestID" id="testID" value="@ViewBag.TestID" />
                        </div>



                            <div class="input-group">
                                @{
                                    var patientList = ((IEnumerable<PatientRegistrationModel>)ViewData["patid"])
                                    .Select(m => new SelectListItem
                {
                    Value = m.PatientID.ToString(), // Assuming ScreenId is of type int
                    Text = $"{m.FullName}"
                });
                                }

                                <input type="text" id="patientDropdownInput" class="form-control" placeholder="Patient Name" value="@ViewBag.SelectedPatientID" onkeyup="filterDropdown(event, 'patientDropdownInput', 'patientDropdown')" onclick="showDropdown('patientDropdown')" required>
                                <ul id="patientDropdown" class="list-group mt-2"
                                    style="display: none; position: absolute; top: 100%; left: 0; width: 100%; max-height: 200px; overflow-y: auto; background-color: white; border: 1px solid #ddd; border-radius: .25rem; box-shadow: 0 0 .5rem rgba(0, 0, 0, .1); z-index: 1000; padding: 0; margin: 0; list-style-type: none;">
                                    @foreach (var item in patientList)
                                    {
                                        <li class="list-group-item" data-value="@item.Value" onclick="selectDropdownItem('patientDropdownInput', 'patientID', '@item.Text', '@item.Value')"
                                            style="padding: .5rem 1rem; cursor: pointer; background-color: white; border: none; list-style-type: none;">
                                            @item.Text
                                        </li>
                                    }
                                </ul>

                                <input type="hidden" name="PatientID" id="patientID" value="@ViewBag.SelectedPatientID" />
                                <button class="btn btn-primary menu-icon tf-icons mdi mdi-account-multiple-plus" type="button" id="button-addon2" data-bs-toggle="modal" data-bs-target="#paymentModal"></button>
                            </div>




                    <div class="col-md-12 col-lg-12">
                        <div class="form-floating form-floating-outline mb-4">
                            @{
                                var Screenlist = ((IEnumerable<ClinicAdminModel>)ViewData["facid"])
                                .Select(m => new SelectListItem
                {
                    Value = m.FacilityID.ToString(), // Assuming ScreenId is of type int
                    Text = $"{m.FacilityID} - {m.ClinicName}"
                });
                            }

                            @Html.DropDownListFor(model => model.FacilityID, Screenlist, "Select Facility ID", new { @class = "form-control", required = "required" })
                            <label asp-for="FacilityID" class="control-label"></label>
                            <span asp-validation-for="FacilityID" class="text-danger"></span>
                        </div>
                    </div>

                        </div>
                    </div>

                    </div>
                </div>
            </div>

            <div class="row" style="height:8%">
            </div>
           
            <div class="col-md-12 col-lg-2">
            </div>
        </div>
        <br/>
    <div class="form-group" style="margin-top:20px">
        <center>

            <button type="button" class="btn btn-primary">Get</button>
            @*    <button type="submit" asp-action="GetReport" value="GetReport" class="btn btn-primary">GetReport</button> *@

        </center>
    </div>
            <br /> 

                   

        <div class="row" style="height: 500px;">
            <div class="col-md-12 col-lg-1">
            </div>

                <div class="col-md-12 col-lg-5">

                <div class="card">
                <div class="card-body " style="background-image: linear-gradient(to right, #FFFFFF 0%, #FFFFFF 51%, #ece5f6 100%);">
                    <div class="form-floating form-floating-outline mb-4">
                            <input asp-for="VisitcaseID1" class="form-control" placeholder="VisitcaseID" required />
                            <label asp-for="VisitcaseID1" class="control-label">VisitCaseID</label>

                            <span asp-validation-for="VisitcaseID1" class="text-danger"></span>
                        </div>
                            <div class="form-floating form-floating-outline mb-4">
                           <input asp-for="TestDateTime" class="form-control" type="datetime-local" placeholder="TestDateTime" required />
                <label asp-for="TestDateTime" class="control-label"></label>
                        
                <span asp-validation-for="TestDateTime" class="text-danger"></span>
            </div>
                            <div class="form-floating form-floating-outline mb-4">
                            <input asp-for="TestResult" class="form-control" placeholder="TestResult"  />
                <label asp-for="TestResult" class="control-label"></label>
                          
                <span asp-validation-for="TestResult" class="text-danger"></span>
            </div>

                    <div class="form-floating form-floating-outline mb-4">
                        <label class="control-label"></label>

                        <div class="btn-group" role="group" aria-label="Food Timing">
                            <input type="radio" class="btn-check" name="TsampleClt" id="Yes" autocomplete="off" value="Yes">
                            <label class="btn btn-outline-primary" for="Yes">Yes</label>

                            <input type="radio" class="btn-check" name="TsampleClt" id="No" autocomplete="off" value="No">
                            <label class="btn btn-outline-primary" for="No">No</label>
                        </div>
                    </div>
                            <div class="form-floating form-floating-outline mb-4">
                            <input asp-for="TsampleCltDateTime" class="form-control" type="datetime-local" placeholder="SampleCollectDateTime" />
                            <label asp-for="TsampleCltDateTime" class="control-label">SampleCollectDateTime</label>
                          
                <span asp-validation-for="TsampleCltDateTime" class="text-danger"></span>
            </div>
                            <div class="form-floating form-floating-outline mb-4">
                            <input asp-for="ExptRsltDateTime" class="form-control" type="datetime-local" placeholder="ExpectedResultDateTime" />
                            <label asp-for="ExptRsltDateTime" class="control-label">ExpectedResultDateTime</label>
                          
                <span asp-validation-for="ExptRsltDateTime" class="text-danger"></span>
            </div>
                    </div>
                </div>
            </div>


                <div class="col-md-12 col-lg-5">
                    <div class="card">
                <div class="card-body " style="background-image: linear-gradient(to right, #FFFFFF 0%, #FFFFFF 51%, #ece5f6 100%);">
                    
                    <div class="form-floating form-floating-outline mb-4">
                        <label class="control-label"> Result Publish</label>

                        <div class="btn-group" role="group" aria-label="Food Timing">
                            <input type="radio" class="btn-check" name="ResultPublish" id="Yes" autocomplete="off" value="Yes">
                            <label class="btn btn-outline-primary" for="Yes">Yes</label>

                            <input type="radio" class="btn-check" name="ResultPublish" id="No" autocomplete="off" value="No">
                            <label class="btn btn-outline-primary" for="No">No</label>
                        </div>
                    </div>
                        <div class="input-group">
                            @{
                                var refdocid = ((IEnumerable<StaffAdminModel>)ViewData["refdocid"])
                                .Select(m => new SelectListItem
                {
                    Value = m.StrStaffID.ToString(), // Assuming ScreenId is of type int
                    Text = $"{m.StrFullName}"
                });
                            }

                        <input type="text" id="doctorDropdownInput" class="form-control" placeholder="Doctor Name" value="@ViewBag.SelecteddoctorID" onkeyup="filterDropdown(event, 'doctorDropdownInput', 'doctorDropdown')" onclick="showDropdown('doctorDropdown')">
                        <ul id="doctorDropdown" class="list-group mt-2"
                            style="display: none; position: absolute; top: 100%; left: 0; width: 100%; max-height: 200px; overflow-y: auto; background-color: white; border: 1px solid #ddd; border-radius: .25rem; box-shadow: 0 0 .5rem rgba(0, 0, 0, .1); z-index: 1000; padding: 0; margin: 0; list-style-type: none;">
                            @foreach (var item in refdocid)
                            {
                                <li class="list-group-item" data-value="@item.Value" onclick="selectDropdownItem('doctorDropdownInput', 'doctorID', '@item.Text', '@item.Value')"
                                    style="padding: .5rem 1rem; cursor: pointer; background-color: white; border: none; list-style-type: none;">
                                    @item.Text
                                </li>
                            }
                        </ul>

                        <input type="hidden" name="DoctorID" id="doctorID" value="@ViewBag.SelecteddoctorID" />
                        </div>



                    
                            <div class="form-floating form-floating-outline mb-4">
                            <input asp-for="ReferDate" class="form-control" placeholder="ReferDate" type="date" />
                <label asp-for="ReferDate" class="control-label"></label>
                           
                <span asp-validation-for="ReferDate" class="text-danger"></span>
            </div>
                            <div class="form-floating form-floating-outline mb-4">
                            <input asp-for="ResultDate" class="form-control" placeholder="ResultDate" type="date" />
                <label asp-for="ResultDate" class="control-label"></label>
                         
                <span asp-validation-for="ResultDate" class="text-danger"></span>
            </div>
            <br />
         
                    </div>
                </div>
            <div class="col-md-12 col-lg-1">
            </div>
            <div class="form-group" style="margin-top:20px">
                <center>
                    <button type="submit" value="Create" class="btn btn-primary">Save</button>

                    @if (ViewBag.Message != null)
                    {
                        <div class="alert alert-success">
                            @ViewBag.Message
                        </div>
                    }
                </center>
            </div>

            </div>

       
            </div>
  
}

<!-- Patient Details Modal -->
<div class="modal fade" id="paymentModal" tabindex="-1" role="dialog" aria-labelledby="paymentModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="paymentModalLabel">Enter Patient Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>

                </button>
            </div>
            <div class="modal-body">


                <form id="modalSearchFormcus" asp-controller="PatientPrescription" asp-action="AddPatientPop" method="post">

                    <div class="col mb-3">



                        <label for="FullName">Patient Name</label>
                        <input type="text" class="form-control" id="FullName" name="FullName" placeholder="Patient Name" />



                    </div>

                    <div class="col mb-3">
                        <label for="searchInput">Phone Number</label>
                        <input type="text" class="form-control" id="PhoneNumber" name="PhoneNumber" placeholder="Phone Number" />
                    </div>


                    <div class="col mb-3">
                        <label for="searchInput">Age</label>
                        <input type="text" class="form-control" id="Age" name="Age" placeholder="Age" />
                    </div>

                    <div class="col mb-3">
                        <label for="searchInput">Gender</label>
                        <input type="text" class="form-control" id="Gender" name="Gender" placeholder="Gender" />
                    </div>


                </form>

                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" id="saveCustomer">Save</button>
                </div>

            </div>
        </div>
    </div>
</div>

<script>
    let suppressInputEvent = false; // Flag for suppressing input events

    // Function to filter dropdown items
    function filterDropdown(event, inputId, dropdownId) {
        if (suppressInputEvent) return; // Prevent filtering if input event is suppressed

        const input = document.getElementById(inputId);
        const dropdown = document.getElementById(dropdownId);
        const filter = input.value.toLowerCase();
        const items = dropdown.querySelectorAll('li');

        items.forEach(item => {
            const text = item.textContent.toLowerCase();
            item.style.display = text.includes(filter) ? '' : 'none';
        });

        dropdown.style.display = filter || input === document.activeElement ? 'block' : 'none'; // Show dropdown when filtering or when input is focused
    }

    // Function to select dropdown item
    function selectDropdownItem(inputId, hiddenId, text, value, dropdownId) {
        const input = document.getElementById(inputId);
        const hidden = document.getElementById(hiddenId);
        const dropdown = document.getElementById(dropdownId);

        const trimmedText = text.trim();
        input.value = trimmedText;
        hidden.value = value;

        // If it's the patient dropdown, fetch additional data (e.g., visit IDs)
        if (dropdownId === 'patientDropdown') {
            fetchVisitIds(value);
        }

        dropdown.style.display = 'none'; // Hide dropdown after selection

        suppressInputEvent = true; // Suppress input event
        setTimeout(() => {
            suppressInputEvent = false; // Remove suppression
        }, 200);
    }

    document.addEventListener('DOMContentLoaded', () => {
        const dropdownConfigs = [
            { inputId: 'testDropdownInput', dropdownId: 'testDropdown', hiddenId: 'testID' },
            { inputId: 'patientDropdownInput', dropdownId: 'patientDropdown', hiddenId: 'patientID' },
            { inputId: 'doctorDropdownInput', dropdownId: 'doctorDropdown', hiddenId: 'doctorID' }
        ];

        dropdownConfigs.forEach(({ inputId, dropdownId, hiddenId }) => {
            const input = document.getElementById(inputId);
            const dropdown = document.getElementById(dropdownId);

            let highlightedIndex = -1;

            function getVisibleItems() {
                return Array.from(dropdown.querySelectorAll('li')).filter(item => item.style.display !== 'none');
            }

            // Input event to filter dropdown items
            input.addEventListener('input', (event) => {
                filterDropdown(event, inputId, dropdownId);
                highlightedIndex = -1; // Reset highlight
            });

            // Keydown event for navigation using arrow keys
            input.addEventListener('keydown', (event) => {
                const visibleItems = getVisibleItems();

                // Keep the dropdown open when using arrow keys
                dropdown.style.display = 'block'; // Ensure dropdown remains open

                switch (event.key) {
                    case 'ArrowDown':
                        if (highlightedIndex < visibleItems.length - 1) {
                            highlightedIndex++;
                            updateHighlight(visibleItems);
                            event.preventDefault(); // Prevent default behavior
                        }
                        break;
                    case 'ArrowUp':
                        if (highlightedIndex > 0) {
                            highlightedIndex--;
                            updateHighlight(visibleItems);
                            event.preventDefault(); // Prevent default behavior
                        }
                        break;
                    case 'Enter':
                        if (highlightedIndex >= 0) {
                            const item = visibleItems[highlightedIndex];
                            selectDropdownItem(inputId, hiddenId, item.textContent, item.getAttribute('data-value'), dropdownId);
                            highlightedIndex = -1; // Reset highlight
                            event.preventDefault();
                        }
                        break;
                    case 'Escape':
                        dropdown.style.display = 'none'; // Close dropdown on escape
                        highlightedIndex = -1; // Reset highlight
                        break;
                    default:
                        dropdown.style.display = 'block'; // Ensure dropdown remains open
                        break;
                }
            });

            // Keep dropdown open when focused
            input.addEventListener('focus', () => {
                dropdown.style.display = 'block';
            });

            function updateHighlight(visibleItems) {
                visibleItems.forEach((item, index) => {
                    item.style.backgroundColor = (index === highlightedIndex) ? '#7344ca' : 'white';
                    item.style.color = (index === highlightedIndex) ? 'white' : 'black'; // Contrast text color
                });
                visibleItems[highlightedIndex]?.scrollIntoView({ block: 'nearest' });
            }

            // Click event to close dropdown when clicking outside
            document.addEventListener('click', (event) => {
                const target = event.target;
                if (!dropdown.contains(target) && target !== input) {
                    dropdown.style.display = 'none';
                }
            });
        });
    });


    // Function to fetch visit IDs
    function fetchVisitIds(patientId) {
        const selectedVisitId = document.getElementById('CaseVisitID').value; // Get the current selected visit ID

        fetch(`/PatientPrescription/GetCaseVisitIDs?patientId=${patientId}`)
            .then(response => response.json())
            .then(data => {
                const visitDropdown = document.getElementById('visitDropdown');
                visitDropdown.innerHTML = ''; // Clear previous options

                const placeholderOption = document.createElement('option');
                placeholderOption.value = '';
                placeholderOption.textContent = 'Select Visit ID'; // Placeholder text
                visitDropdown.appendChild(placeholderOption);

                if (data.length > 0) {
                    data.forEach(visitId => {
                        const option = document.createElement('option');
                        option.value = visitId;
                        option.textContent = visitId;
                        // Set the selected attribute if this visitId matches the selectedVisitId
                        if (visitId === selectedVisitId) {
                            option.selected = true;
                        }
                        visitDropdown.appendChild(option);
                    });
                } else {
                    visitDropdown.innerHTML = '<option value="">No visits found</option>'; // If no visits found
                }

                // Clear the hidden field initially
                //  document.getElementById('CaseVisitID').value = '';
            })
            .catch(error => console.error('Error fetching visit IDs:', error));
    }


    // Function to add a new visit
    function addNewVisit() {
        const patientId = document.getElementById('patientID').value;

        if (!patientId) {
            alert('Please select a patient first.');
            return;
        }

        fetch(`/PatientPrescription/AddNewVisitID?patientId=${patientId}`)
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    const visitDropdown = document.getElementById('visitDropdown');
                    const option = document.createElement('option');
                    option.value = data.newVisitId;
                    option.textContent = data.newVisitId;
                    visitDropdown.appendChild(option);
                    visitDropdown.value = data.newVisitId; // Set the newly added option as selected

                    document.getElementById('CaseVisitID').value = data.newVisitId;
                } else {
                    alert(data.message);
                }
            })
            .catch(error => console.error('Error adding new visit ID:', error));
    }

    document.getElementById('visitDropdown').addEventListener('change', function () {
        document.getElementById('CaseVisitID').value = this.value; // Update hidden input on selection
    });

    // Trigger the fetchVisitIds function when the page loads
    window.onload = function () {
        const selectedPatientId = document.getElementById('patientID').value;
        if (selectedPatientId) {
            fetchVisitIds(selectedPatientId); // Call the function with the selected patient ID
        }
    };

</script>



