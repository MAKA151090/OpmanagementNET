@model HealthCare.Models.InPatientTransferUpdateModel

@{
    ViewData["Title"] = "InPatientTransfer";
    Layout = "~/Views/Shared/_ContentNavbarLayout.cshtml";
}




<div class="card xl-6">
    <div class="card-body pt-2 mt-1">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h2 class="text-primary mb-1">In Patient Transfer</h2>
            <small class="text-muted float-end"></small>
            <div class="row"></div>
        </div>
    </div>
        <form asp-action="InPatientTransfer" asp-controller="InPatientModules" method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <div class="row gy-4">
            <div class="col-md-12 col-lg-1">
            </div>
            <div class="col-md-12 col-lg-4">




                        <div class="form-floating form-floating-outline mb-4">
                            @{
                                var PatientId = ((IEnumerable<PatientRegistrationModel>)ViewData["patientID"])
                                .Select(m => new SelectListItem
            {
                Value = m.PatientID.ToString(), // Assuming ScreenId is of type int
                Text = $"{m.PatientID} - {m.FullName}"
            });
                            }

                            @Html.DropDownListFor(model => model.PatientId, PatientId, "Select Patient ID", new { @class = "form-control", required = "required" })
                            <label asp-for="PatientId" class="control-label">PatientID</label>
                            <span asp-validation-for="PatientId" class="text-danger"></span>
                        </div>



                        <div class="form-floating form-floating-outline mb-4">
                            @{
                                var CaseID = ((IEnumerable<InpatientAdmissionModel>)ViewData["CaseID"])
                                .Select(m => new SelectListItem
            {
                Value = m.CaseID.ToString(), // Assuming ScreenId is of type int
                Text = $"{m.CaseID}"
            });
                            }

                            @Html.DropDownListFor(model => model.CaseId, CaseID, "Select Case ID", new { @class = "form-control", required = "required" })
                            <label asp-for="CaseId" class="control-label">Case ID</label>
                            <span asp-validation-for="CaseId" class="text-danger"></span>
                        </div>


                        <div class="form-floating form-floating-outline mb-4">
                            @{
                                var bedid = ((IEnumerable<HospitalBedMasterModel>)ViewData["bedid"])
                                .Select(m => new SelectListItem
            {
                Value = m.BedID.ToString(), // Assuming ScreenId is of type int
                Text = $"{m.BedID}"
            });
                            }

                            @Html.DropDownListFor(model => model.BedId, bedid, "Select Bed ID", new { @class = "form-control", required = "required" })
                            <label asp-for="BedId" class="control-label">Bed ID</label>
                            <span asp-validation-for="BedId" class="text-danger"></span>
                        </div

                

                    <div class="form-group">
                <button type="submit" name="buttonType" value="Get" class="btn btn-primary" >Get</button>
            </div>             
                
                
                
                </div>
                <div class="col-md-12 col-lg-4">

    @if (@Model != null)
    {
        <div>
            <label asp-for="RoomTypeFrom" class="control-label"></label>
            <input asp-for="RoomTypeFrom" value="@Model.RoomTypeFrom" class="form-control" />
            <span asp-validation-for="RoomTypeFrom" class="text-danger"></span>
        </div>
        
        <div>
            <label asp-for="RoomTypeTo" class="control-label"></label>
            <input asp-for="RoomTypeTo" value="@Model.RoomTypeTo" class="form-control" />
            <span asp-validation-for="RoomTypeTo" class="text-danger"></span>
        </div>
        
        <div>
            <label asp-for="BedIdFrom" class="control-label"></label>
            <input asp-for="BedIdFrom" value="@Model.BedIdFrom" class="form-control" />
            <span asp-validation-for="BedIdFrom" class="text-danger"></span>
        </div>
        
        <div>
            <label asp-for="BedIdTo" class="control-label"></label>
            <input asp-for="BedIdTo" value="@Model.BedIdTo" class="form-control" />
            <span asp-validation-for="BedIdTo" class="text-danger"></span>
        </div>
        
        <div>
            <label asp-for="TransferNotes" class="control-label"></label>
            <input asp-for="TransferNotes" value="@Model.TransferNotes" class="form-control" />
            <span asp-validation-for="TransferNotes" class="text-danger"></span>
        </div>
        
        <div>
            <label asp-for="DocId" class="control-label"></label>
            <input asp-for="DocId" value="@Model.DocId" class="form-control" />
            <span asp-validation-for="DocId" class="text-danger"></span>
        </div>
        
        <div>
            <label asp-for="ChangeDate" class="control-label"></label>
            <input asp-for="ChangeDate" value="@Model.ChangeDate" class="form-control" />
            <span asp-validation-for="ChangeDate" class="text-danger"></span>
        </div>
    }



            
          
            <div class="form-group">
                <button type="submit" name="buttonType" value="Save" class="btn btn-primary" >Save</button>
            </div>
          </div>
          </div>
        </form>
    </div>